# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Key(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, contact: str=None, quota: int=None, used: int=None):  # noqa: E501
        """Key - a model defined in Swagger

        :param id: The id of this Key.  # noqa: E501
        :type id: str
        :param contact: The contact of this Key.  # noqa: E501
        :type contact: str
        :param quota: The quota of this Key.  # noqa: E501
        :type quota: int
        :param used: The used of this Key.  # noqa: E501
        :type used: int
        """
        self.swagger_types = {
            'id': str,
            'contact': str,
            'quota': int,
            'used': int
        }

        self.attribute_map = {
            'id': 'id',
            'contact': 'contact',
            'quota': 'quota',
            'used': 'used'
        }
        self._id = id
        self._contact = contact
        self._quota = quota
        self._used = used

    @classmethod
    def from_dict(cls, dikt) -> 'Key':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Key of this Key.  # noqa: E501
        :rtype: Key
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Key.


        :return: The id of this Key.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Key.


        :param id: The id of this Key.
        :type id: str
        """

        self._id = id

    @property
    def contact(self) -> str:
        """Gets the contact of this Key.


        :return: The contact of this Key.
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact: str):
        """Sets the contact of this Key.


        :param contact: The contact of this Key.
        :type contact: str
        """

        self._contact = contact

    @property
    def quota(self) -> int:
        """Gets the quota of this Key.


        :return: The quota of this Key.
        :rtype: int
        """
        return self._quota

    @quota.setter
    def quota(self, quota: int):
        """Sets the quota of this Key.


        :param quota: The quota of this Key.
        :type quota: int
        """

        self._quota = quota

    @property
    def used(self) -> int:
        """Gets the used of this Key.


        :return: The used of this Key.
        :rtype: int
        """
        return self._used

    @used.setter
    def used(self, used: int):
        """Sets the used of this Key.


        :param used: The used of this Key.
        :type used: int
        """

        self._used = used
