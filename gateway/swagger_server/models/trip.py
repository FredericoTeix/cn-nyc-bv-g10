# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Trip(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, pickup_datetime: datetime=None, dropoff_datetime: datetime=None, pickup_location_id: float=None, dropoff_location_id: float=None, passenger_count: float=1):  # noqa: E501
        """Trip - a model defined in Swagger

        :param pickup_datetime: The pickup_datetime of this Trip.  # noqa: E501
        :type pickup_datetime: datetime
        :param dropoff_datetime: The dropoff_datetime of this Trip.  # noqa: E501
        :type dropoff_datetime: datetime
        :param pickup_location_id: The pickup_location_id of this Trip.  # noqa: E501
        :type pickup_location_id: float
        :param dropoff_location_id: The dropoff_location_id of this Trip.  # noqa: E501
        :type dropoff_location_id: float
        :param passenger_count: The passenger_count of this Trip.  # noqa: E501
        :type passenger_count: float
        """
        self.swagger_types = {
            'pickup_datetime': datetime,
            'dropoff_datetime': datetime,
            'pickup_location_id': float,
            'dropoff_location_id': float,
            'passenger_count': float
        }

        self.attribute_map = {
            'pickup_datetime': 'pickup_datetime',
            'dropoff_datetime': 'dropoff_datetime',
            'pickup_location_id': 'pickup_location_id',
            'dropoff_location_id': 'dropoff_location_id',
            'passenger_count': 'passenger_count'
        }
        self._pickup_datetime = pickup_datetime
        self._dropoff_datetime = dropoff_datetime
        self._pickup_location_id = pickup_location_id
        self._dropoff_location_id = dropoff_location_id
        self._passenger_count = passenger_count

    @classmethod
    def from_dict(cls, dikt) -> 'Trip':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Trip of this Trip.  # noqa: E501
        :rtype: Trip
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pickup_datetime(self) -> datetime:
        """Gets the pickup_datetime of this Trip.


        :return: The pickup_datetime of this Trip.
        :rtype: datetime
        """
        return self._pickup_datetime

    @pickup_datetime.setter
    def pickup_datetime(self, pickup_datetime: datetime):
        """Sets the pickup_datetime of this Trip.


        :param pickup_datetime: The pickup_datetime of this Trip.
        :type pickup_datetime: datetime
        """
        if pickup_datetime is None:
            raise ValueError("Invalid value for `pickup_datetime`, must not be `None`")  # noqa: E501

        self._pickup_datetime = pickup_datetime

    @property
    def dropoff_datetime(self) -> datetime:
        """Gets the dropoff_datetime of this Trip.


        :return: The dropoff_datetime of this Trip.
        :rtype: datetime
        """
        return self._dropoff_datetime

    @dropoff_datetime.setter
    def dropoff_datetime(self, dropoff_datetime: datetime):
        """Sets the dropoff_datetime of this Trip.


        :param dropoff_datetime: The dropoff_datetime of this Trip.
        :type dropoff_datetime: datetime
        """
        if dropoff_datetime is None:
            raise ValueError("Invalid value for `dropoff_datetime`, must not be `None`")  # noqa: E501

        self._dropoff_datetime = dropoff_datetime

    @property
    def pickup_location_id(self) -> float:
        """Gets the pickup_location_id of this Trip.


        :return: The pickup_location_id of this Trip.
        :rtype: float
        """
        return self._pickup_location_id

    @pickup_location_id.setter
    def pickup_location_id(self, pickup_location_id: float):
        """Sets the pickup_location_id of this Trip.


        :param pickup_location_id: The pickup_location_id of this Trip.
        :type pickup_location_id: float
        """
        if pickup_location_id is None:
            raise ValueError("Invalid value for `pickup_location_id`, must not be `None`")  # noqa: E501

        self._pickup_location_id = pickup_location_id

    @property
    def dropoff_location_id(self) -> float:
        """Gets the dropoff_location_id of this Trip.


        :return: The dropoff_location_id of this Trip.
        :rtype: float
        """
        return self._dropoff_location_id

    @dropoff_location_id.setter
    def dropoff_location_id(self, dropoff_location_id: float):
        """Sets the dropoff_location_id of this Trip.


        :param dropoff_location_id: The dropoff_location_id of this Trip.
        :type dropoff_location_id: float
        """
        if dropoff_location_id is None:
            raise ValueError("Invalid value for `dropoff_location_id`, must not be `None`")  # noqa: E501

        self._dropoff_location_id = dropoff_location_id

    @property
    def passenger_count(self) -> float:
        """Gets the passenger_count of this Trip.


        :return: The passenger_count of this Trip.
        :rtype: float
        """
        return self._passenger_count

    @passenger_count.setter
    def passenger_count(self, passenger_count: float):
        """Sets the passenger_count of this Trip.


        :param passenger_count: The passenger_count of this Trip.
        :type passenger_count: float
        """
        if passenger_count is None:
            raise ValueError("Invalid value for `passenger_count`, must not be `None`")  # noqa: E501

        self._passenger_count = passenger_count
