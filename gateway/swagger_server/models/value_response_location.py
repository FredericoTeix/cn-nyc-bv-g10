# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ValueResponseLocation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, value: int=None, certainty: int=None, first_record: datetime=None, last_record: datetime=None, number_businesses: float=None):  # noqa: E501
        """ValueResponseLocation - a model defined in Swagger

        :param value: The value of this ValueResponseLocation.  # noqa: E501
        :type value: int
        :param certainty: The certainty of this ValueResponseLocation.  # noqa: E501
        :type certainty: int
        :param first_record: The first_record of this ValueResponseLocation.  # noqa: E501
        :type first_record: datetime
        :param last_record: The last_record of this ValueResponseLocation.  # noqa: E501
        :type last_record: datetime
        :param number_businesses: The number_businesses of this ValueResponseLocation.  # noqa: E501
        :type number_businesses: float
        """
        self.swagger_types = {
            'value': int,
            'certainty': int,
            'first_record': datetime,
            'last_record': datetime,
            'number_businesses': float
        }

        self.attribute_map = {
            'value': 'value',
            'certainty': 'certainty',
            'first_record': 'first_record',
            'last_record': 'last_record',
            'number_businesses': 'number_businesses'
        }
        self._value = value
        self._certainty = certainty
        self._first_record = first_record
        self._last_record = last_record
        self._number_businesses = number_businesses

    @classmethod
    def from_dict(cls, dikt) -> 'ValueResponseLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ValueResponseLocation of this ValueResponseLocation.  # noqa: E501
        :rtype: ValueResponseLocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self) -> int:
        """Gets the value of this ValueResponseLocation.

        Value of the business  # noqa: E501

        :return: The value of this ValueResponseLocation.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value: int):
        """Sets the value of this ValueResponseLocation.

        Value of the business  # noqa: E501

        :param value: The value of this ValueResponseLocation.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def certainty(self) -> int:
        """Gets the certainty of this ValueResponseLocation.

        Scales with the number of total data used to calculate the value  # noqa: E501

        :return: The certainty of this ValueResponseLocation.
        :rtype: int
        """
        return self._certainty

    @certainty.setter
    def certainty(self, certainty: int):
        """Sets the certainty of this ValueResponseLocation.

        Scales with the number of total data used to calculate the value  # noqa: E501

        :param certainty: The certainty of this ValueResponseLocation.
        :type certainty: int
        """
        if certainty is None:
            raise ValueError("Invalid value for `certainty`, must not be `None`")  # noqa: E501

        self._certainty = certainty

    @property
    def first_record(self) -> datetime:
        """Gets the first_record of this ValueResponseLocation.

        The date of the first date used for calculating the value  # noqa: E501

        :return: The first_record of this ValueResponseLocation.
        :rtype: datetime
        """
        return self._first_record

    @first_record.setter
    def first_record(self, first_record: datetime):
        """Sets the first_record of this ValueResponseLocation.

        The date of the first date used for calculating the value  # noqa: E501

        :param first_record: The first_record of this ValueResponseLocation.
        :type first_record: datetime
        """
        if first_record is None:
            raise ValueError("Invalid value for `first_record`, must not be `None`")  # noqa: E501

        self._first_record = first_record

    @property
    def last_record(self) -> datetime:
        """Gets the last_record of this ValueResponseLocation.

        The date of the last date used for calculating the value  # noqa: E501

        :return: The last_record of this ValueResponseLocation.
        :rtype: datetime
        """
        return self._last_record

    @last_record.setter
    def last_record(self, last_record: datetime):
        """Sets the last_record of this ValueResponseLocation.

        The date of the last date used for calculating the value  # noqa: E501

        :param last_record: The last_record of this ValueResponseLocation.
        :type last_record: datetime
        """
        if last_record is None:
            raise ValueError("Invalid value for `last_record`, must not be `None`")  # noqa: E501

        self._last_record = last_record

    @property
    def number_businesses(self) -> float:
        """Gets the number_businesses of this ValueResponseLocation.

        Number of businesses in the location given to calculate the value  # noqa: E501

        :return: The number_businesses of this ValueResponseLocation.
        :rtype: float
        """
        return self._number_businesses

    @number_businesses.setter
    def number_businesses(self, number_businesses: float):
        """Sets the number_businesses of this ValueResponseLocation.

        Number of businesses in the location given to calculate the value  # noqa: E501

        :param number_businesses: The number_businesses of this ValueResponseLocation.
        :type number_businesses: float
        """

        self._number_businesses = number_businesses
